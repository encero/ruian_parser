// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/encero/ruian_parser/ent/addressplace"
	"github.com/encero/ruian_parser/ent/street"
)

// AddressPlaceCreate is the builder for creating a AddressPlace entity.
type AddressPlaceCreate struct {
	config
	mutation *AddressPlaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNumber sets the "number" field.
func (apc *AddressPlaceCreate) SetNumber(i int32) *AddressPlaceCreate {
	apc.mutation.SetNumber(i)
	return apc
}

// SetOrientationNumber sets the "orientation_number" field.
func (apc *AddressPlaceCreate) SetOrientationNumber(i int32) *AddressPlaceCreate {
	apc.mutation.SetOrientationNumber(i)
	return apc
}

// SetNillableOrientationNumber sets the "orientation_number" field if the given value is not nil.
func (apc *AddressPlaceCreate) SetNillableOrientationNumber(i *int32) *AddressPlaceCreate {
	if i != nil {
		apc.SetOrientationNumber(*i)
	}
	return apc
}

// SetOrientationNumberLetter sets the "orientation_number_letter" field.
func (apc *AddressPlaceCreate) SetOrientationNumberLetter(s string) *AddressPlaceCreate {
	apc.mutation.SetOrientationNumberLetter(s)
	return apc
}

// SetNillableOrientationNumberLetter sets the "orientation_number_letter" field if the given value is not nil.
func (apc *AddressPlaceCreate) SetNillableOrientationNumberLetter(s *string) *AddressPlaceCreate {
	if s != nil {
		apc.SetOrientationNumberLetter(*s)
	}
	return apc
}

// SetZip sets the "zip" field.
func (apc *AddressPlaceCreate) SetZip(i int32) *AddressPlaceCreate {
	apc.mutation.SetZip(i)
	return apc
}

// SetID sets the "id" field.
func (apc *AddressPlaceCreate) SetID(i int32) *AddressPlaceCreate {
	apc.mutation.SetID(i)
	return apc
}

// AddStreetIDs adds the "streets" edge to the Street entity by IDs.
func (apc *AddressPlaceCreate) AddStreetIDs(ids ...int32) *AddressPlaceCreate {
	apc.mutation.AddStreetIDs(ids...)
	return apc
}

// AddStreets adds the "streets" edges to the Street entity.
func (apc *AddressPlaceCreate) AddStreets(s ...*Street) *AddressPlaceCreate {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return apc.AddStreetIDs(ids...)
}

// Mutation returns the AddressPlaceMutation object of the builder.
func (apc *AddressPlaceCreate) Mutation() *AddressPlaceMutation {
	return apc.mutation
}

// Save creates the AddressPlace in the database.
func (apc *AddressPlaceCreate) Save(ctx context.Context) (*AddressPlace, error) {
	var (
		err  error
		node *AddressPlace
	)
	if len(apc.hooks) == 0 {
		if err = apc.check(); err != nil {
			return nil, err
		}
		node, err = apc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AddressPlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apc.check(); err != nil {
				return nil, err
			}
			apc.mutation = mutation
			if node, err = apc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(apc.hooks) - 1; i >= 0; i-- {
			if apc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AddressPlaceCreate) SaveX(ctx context.Context) *AddressPlace {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AddressPlaceCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AddressPlaceCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AddressPlaceCreate) check() error {
	if _, ok := apc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "number"`)}
	}
	if _, ok := apc.mutation.Zip(); !ok {
		return &ValidationError{Name: "zip", err: errors.New(`ent: missing required field "zip"`)}
	}
	return nil
}

func (apc *AddressPlaceCreate) sqlSave(ctx context.Context) (*AddressPlace, error) {
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (apc *AddressPlaceCreate) createSpec() (*AddressPlace, *sqlgraph.CreateSpec) {
	var (
		_node = &AddressPlace{config: apc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: addressplace.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: addressplace.FieldID,
			},
		}
	)
	_spec.OnConflict = apc.conflict
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := apc.mutation.Number(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: addressplace.FieldNumber,
		})
		_node.Number = value
	}
	if value, ok := apc.mutation.OrientationNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: addressplace.FieldOrientationNumber,
		})
		_node.OrientationNumber = value
	}
	if value, ok := apc.mutation.OrientationNumberLetter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: addressplace.FieldOrientationNumberLetter,
		})
		_node.OrientationNumberLetter = value
	}
	if value, ok := apc.mutation.Zip(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: addressplace.FieldZip,
		})
		_node.Zip = value
	}
	if nodes := apc.mutation.StreetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   addressplace.StreetsTable,
			Columns: addressplace.StreetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: street.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AddressPlace.Create().
//		SetNumber(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressPlaceUpsert) {
//			SetNumber(v+v).
//		}).
//		Exec(ctx)
//
func (apc *AddressPlaceCreate) OnConflict(opts ...sql.ConflictOption) *AddressPlaceUpsertOne {
	apc.conflict = opts
	return &AddressPlaceUpsertOne{
		create: apc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AddressPlace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (apc *AddressPlaceCreate) OnConflictColumns(columns ...string) *AddressPlaceUpsertOne {
	apc.conflict = append(apc.conflict, sql.ConflictColumns(columns...))
	return &AddressPlaceUpsertOne{
		create: apc,
	}
}

type (
	// AddressPlaceUpsertOne is the builder for "upsert"-ing
	//  one AddressPlace node.
	AddressPlaceUpsertOne struct {
		create *AddressPlaceCreate
	}

	// AddressPlaceUpsert is the "OnConflict" setter.
	AddressPlaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetNumber sets the "number" field.
func (u *AddressPlaceUpsert) SetNumber(v int32) *AddressPlaceUpsert {
	u.Set(addressplace.FieldNumber, v)
	return u
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *AddressPlaceUpsert) UpdateNumber() *AddressPlaceUpsert {
	u.SetExcluded(addressplace.FieldNumber)
	return u
}

// SetOrientationNumber sets the "orientation_number" field.
func (u *AddressPlaceUpsert) SetOrientationNumber(v int32) *AddressPlaceUpsert {
	u.Set(addressplace.FieldOrientationNumber, v)
	return u
}

// UpdateOrientationNumber sets the "orientation_number" field to the value that was provided on create.
func (u *AddressPlaceUpsert) UpdateOrientationNumber() *AddressPlaceUpsert {
	u.SetExcluded(addressplace.FieldOrientationNumber)
	return u
}

// ClearOrientationNumber clears the value of the "orientation_number" field.
func (u *AddressPlaceUpsert) ClearOrientationNumber() *AddressPlaceUpsert {
	u.SetNull(addressplace.FieldOrientationNumber)
	return u
}

// SetOrientationNumberLetter sets the "orientation_number_letter" field.
func (u *AddressPlaceUpsert) SetOrientationNumberLetter(v string) *AddressPlaceUpsert {
	u.Set(addressplace.FieldOrientationNumberLetter, v)
	return u
}

// UpdateOrientationNumberLetter sets the "orientation_number_letter" field to the value that was provided on create.
func (u *AddressPlaceUpsert) UpdateOrientationNumberLetter() *AddressPlaceUpsert {
	u.SetExcluded(addressplace.FieldOrientationNumberLetter)
	return u
}

// ClearOrientationNumberLetter clears the value of the "orientation_number_letter" field.
func (u *AddressPlaceUpsert) ClearOrientationNumberLetter() *AddressPlaceUpsert {
	u.SetNull(addressplace.FieldOrientationNumberLetter)
	return u
}

// SetZip sets the "zip" field.
func (u *AddressPlaceUpsert) SetZip(v int32) *AddressPlaceUpsert {
	u.Set(addressplace.FieldZip, v)
	return u
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *AddressPlaceUpsert) UpdateZip() *AddressPlaceUpsert {
	u.SetExcluded(addressplace.FieldZip)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AddressPlace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addressplace.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AddressPlaceUpsertOne) UpdateNewValues() *AddressPlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(addressplace.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AddressPlace.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AddressPlaceUpsertOne) Ignore() *AddressPlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressPlaceUpsertOne) DoNothing() *AddressPlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressPlaceCreate.OnConflict
// documentation for more info.
func (u *AddressPlaceUpsertOne) Update(set func(*AddressPlaceUpsert)) *AddressPlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressPlaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetNumber sets the "number" field.
func (u *AddressPlaceUpsertOne) SetNumber(v int32) *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.SetNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *AddressPlaceUpsertOne) UpdateNumber() *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.UpdateNumber()
	})
}

// SetOrientationNumber sets the "orientation_number" field.
func (u *AddressPlaceUpsertOne) SetOrientationNumber(v int32) *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.SetOrientationNumber(v)
	})
}

// UpdateOrientationNumber sets the "orientation_number" field to the value that was provided on create.
func (u *AddressPlaceUpsertOne) UpdateOrientationNumber() *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.UpdateOrientationNumber()
	})
}

// ClearOrientationNumber clears the value of the "orientation_number" field.
func (u *AddressPlaceUpsertOne) ClearOrientationNumber() *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.ClearOrientationNumber()
	})
}

// SetOrientationNumberLetter sets the "orientation_number_letter" field.
func (u *AddressPlaceUpsertOne) SetOrientationNumberLetter(v string) *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.SetOrientationNumberLetter(v)
	})
}

// UpdateOrientationNumberLetter sets the "orientation_number_letter" field to the value that was provided on create.
func (u *AddressPlaceUpsertOne) UpdateOrientationNumberLetter() *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.UpdateOrientationNumberLetter()
	})
}

// ClearOrientationNumberLetter clears the value of the "orientation_number_letter" field.
func (u *AddressPlaceUpsertOne) ClearOrientationNumberLetter() *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.ClearOrientationNumberLetter()
	})
}

// SetZip sets the "zip" field.
func (u *AddressPlaceUpsertOne) SetZip(v int32) *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *AddressPlaceUpsertOne) UpdateZip() *AddressPlaceUpsertOne {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.UpdateZip()
	})
}

// Exec executes the query.
func (u *AddressPlaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressPlaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressPlaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AddressPlaceUpsertOne) ID(ctx context.Context) (id int32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AddressPlaceUpsertOne) IDX(ctx context.Context) int32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AddressPlaceCreateBulk is the builder for creating many AddressPlace entities in bulk.
type AddressPlaceCreateBulk struct {
	config
	builders []*AddressPlaceCreate
	conflict []sql.ConflictOption
}

// Save creates the AddressPlace entities in the database.
func (apcb *AddressPlaceCreateBulk) Save(ctx context.Context) ([]*AddressPlace, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AddressPlace, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressPlaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = apcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AddressPlaceCreateBulk) SaveX(ctx context.Context) []*AddressPlace {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AddressPlaceCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AddressPlaceCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AddressPlace.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressPlaceUpsert) {
//			SetNumber(v+v).
//		}).
//		Exec(ctx)
//
func (apcb *AddressPlaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *AddressPlaceUpsertBulk {
	apcb.conflict = opts
	return &AddressPlaceUpsertBulk{
		create: apcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AddressPlace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (apcb *AddressPlaceCreateBulk) OnConflictColumns(columns ...string) *AddressPlaceUpsertBulk {
	apcb.conflict = append(apcb.conflict, sql.ConflictColumns(columns...))
	return &AddressPlaceUpsertBulk{
		create: apcb,
	}
}

// AddressPlaceUpsertBulk is the builder for "upsert"-ing
// a bulk of AddressPlace nodes.
type AddressPlaceUpsertBulk struct {
	create *AddressPlaceCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AddressPlace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addressplace.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AddressPlaceUpsertBulk) UpdateNewValues() *AddressPlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(addressplace.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AddressPlace.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AddressPlaceUpsertBulk) Ignore() *AddressPlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressPlaceUpsertBulk) DoNothing() *AddressPlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressPlaceCreateBulk.OnConflict
// documentation for more info.
func (u *AddressPlaceUpsertBulk) Update(set func(*AddressPlaceUpsert)) *AddressPlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressPlaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetNumber sets the "number" field.
func (u *AddressPlaceUpsertBulk) SetNumber(v int32) *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.SetNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *AddressPlaceUpsertBulk) UpdateNumber() *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.UpdateNumber()
	})
}

// SetOrientationNumber sets the "orientation_number" field.
func (u *AddressPlaceUpsertBulk) SetOrientationNumber(v int32) *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.SetOrientationNumber(v)
	})
}

// UpdateOrientationNumber sets the "orientation_number" field to the value that was provided on create.
func (u *AddressPlaceUpsertBulk) UpdateOrientationNumber() *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.UpdateOrientationNumber()
	})
}

// ClearOrientationNumber clears the value of the "orientation_number" field.
func (u *AddressPlaceUpsertBulk) ClearOrientationNumber() *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.ClearOrientationNumber()
	})
}

// SetOrientationNumberLetter sets the "orientation_number_letter" field.
func (u *AddressPlaceUpsertBulk) SetOrientationNumberLetter(v string) *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.SetOrientationNumberLetter(v)
	})
}

// UpdateOrientationNumberLetter sets the "orientation_number_letter" field to the value that was provided on create.
func (u *AddressPlaceUpsertBulk) UpdateOrientationNumberLetter() *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.UpdateOrientationNumberLetter()
	})
}

// ClearOrientationNumberLetter clears the value of the "orientation_number_letter" field.
func (u *AddressPlaceUpsertBulk) ClearOrientationNumberLetter() *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.ClearOrientationNumberLetter()
	})
}

// SetZip sets the "zip" field.
func (u *AddressPlaceUpsertBulk) SetZip(v int32) *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *AddressPlaceUpsertBulk) UpdateZip() *AddressPlaceUpsertBulk {
	return u.Update(func(s *AddressPlaceUpsert) {
		s.UpdateZip()
	})
}

// Exec executes the query.
func (u *AddressPlaceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AddressPlaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressPlaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressPlaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
