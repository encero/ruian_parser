// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/encero/ruian_parser/ent/addressplace"
	"github.com/encero/ruian_parser/ent/city"
	"github.com/encero/ruian_parser/ent/predicate"
	"github.com/encero/ruian_parser/ent/street"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAddressPlace = "AddressPlace"
	TypeCity         = "City"
	TypeStreet       = "Street"
)

// AddressPlaceMutation represents an operation that mutates the AddressPlace nodes in the graph.
type AddressPlaceMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int32
	number                    *int32
	addnumber                 *int32
	orientation_number        *int32
	addorientation_number     *int32
	orientation_number_letter *string
	zip                       *int32
	addzip                    *int32
	clearedFields             map[string]struct{}
	streets                   map[int32]struct{}
	removedstreets            map[int32]struct{}
	clearedstreets            bool
	done                      bool
	oldValue                  func(context.Context) (*AddressPlace, error)
	predicates                []predicate.AddressPlace
}

var _ ent.Mutation = (*AddressPlaceMutation)(nil)

// addressplaceOption allows management of the mutation configuration using functional options.
type addressplaceOption func(*AddressPlaceMutation)

// newAddressPlaceMutation creates new mutation for the AddressPlace entity.
func newAddressPlaceMutation(c config, op Op, opts ...addressplaceOption) *AddressPlaceMutation {
	m := &AddressPlaceMutation{
		config:        c,
		op:            op,
		typ:           TypeAddressPlace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAddressPlaceID sets the ID field of the mutation.
func withAddressPlaceID(id int32) addressplaceOption {
	return func(m *AddressPlaceMutation) {
		var (
			err   error
			once  sync.Once
			value *AddressPlace
		)
		m.oldValue = func(ctx context.Context) (*AddressPlace, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AddressPlace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAddressPlace sets the old AddressPlace of the mutation.
func withAddressPlace(node *AddressPlace) addressplaceOption {
	return func(m *AddressPlaceMutation) {
		m.oldValue = func(context.Context) (*AddressPlace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AddressPlaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AddressPlaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AddressPlace entities.
func (m *AddressPlaceMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AddressPlaceMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNumber sets the "number" field.
func (m *AddressPlaceMutation) SetNumber(i int32) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *AddressPlaceMutation) Number() (r int32, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the AddressPlace entity.
// If the AddressPlace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressPlaceMutation) OldNumber(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *AddressPlaceMutation) AddNumber(i int32) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *AddressPlaceMutation) AddedNumber() (r int32, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *AddressPlaceMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetOrientationNumber sets the "orientation_number" field.
func (m *AddressPlaceMutation) SetOrientationNumber(i int32) {
	m.orientation_number = &i
	m.addorientation_number = nil
}

// OrientationNumber returns the value of the "orientation_number" field in the mutation.
func (m *AddressPlaceMutation) OrientationNumber() (r int32, exists bool) {
	v := m.orientation_number
	if v == nil {
		return
	}
	return *v, true
}

// OldOrientationNumber returns the old "orientation_number" field's value of the AddressPlace entity.
// If the AddressPlace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressPlaceMutation) OldOrientationNumber(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrientationNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrientationNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrientationNumber: %w", err)
	}
	return oldValue.OrientationNumber, nil
}

// AddOrientationNumber adds i to the "orientation_number" field.
func (m *AddressPlaceMutation) AddOrientationNumber(i int32) {
	if m.addorientation_number != nil {
		*m.addorientation_number += i
	} else {
		m.addorientation_number = &i
	}
}

// AddedOrientationNumber returns the value that was added to the "orientation_number" field in this mutation.
func (m *AddressPlaceMutation) AddedOrientationNumber() (r int32, exists bool) {
	v := m.addorientation_number
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrientationNumber clears the value of the "orientation_number" field.
func (m *AddressPlaceMutation) ClearOrientationNumber() {
	m.orientation_number = nil
	m.addorientation_number = nil
	m.clearedFields[addressplace.FieldOrientationNumber] = struct{}{}
}

// OrientationNumberCleared returns if the "orientation_number" field was cleared in this mutation.
func (m *AddressPlaceMutation) OrientationNumberCleared() bool {
	_, ok := m.clearedFields[addressplace.FieldOrientationNumber]
	return ok
}

// ResetOrientationNumber resets all changes to the "orientation_number" field.
func (m *AddressPlaceMutation) ResetOrientationNumber() {
	m.orientation_number = nil
	m.addorientation_number = nil
	delete(m.clearedFields, addressplace.FieldOrientationNumber)
}

// SetOrientationNumberLetter sets the "orientation_number_letter" field.
func (m *AddressPlaceMutation) SetOrientationNumberLetter(s string) {
	m.orientation_number_letter = &s
}

// OrientationNumberLetter returns the value of the "orientation_number_letter" field in the mutation.
func (m *AddressPlaceMutation) OrientationNumberLetter() (r string, exists bool) {
	v := m.orientation_number_letter
	if v == nil {
		return
	}
	return *v, true
}

// OldOrientationNumberLetter returns the old "orientation_number_letter" field's value of the AddressPlace entity.
// If the AddressPlace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressPlaceMutation) OldOrientationNumberLetter(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrientationNumberLetter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrientationNumberLetter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrientationNumberLetter: %w", err)
	}
	return oldValue.OrientationNumberLetter, nil
}

// ClearOrientationNumberLetter clears the value of the "orientation_number_letter" field.
func (m *AddressPlaceMutation) ClearOrientationNumberLetter() {
	m.orientation_number_letter = nil
	m.clearedFields[addressplace.FieldOrientationNumberLetter] = struct{}{}
}

// OrientationNumberLetterCleared returns if the "orientation_number_letter" field was cleared in this mutation.
func (m *AddressPlaceMutation) OrientationNumberLetterCleared() bool {
	_, ok := m.clearedFields[addressplace.FieldOrientationNumberLetter]
	return ok
}

// ResetOrientationNumberLetter resets all changes to the "orientation_number_letter" field.
func (m *AddressPlaceMutation) ResetOrientationNumberLetter() {
	m.orientation_number_letter = nil
	delete(m.clearedFields, addressplace.FieldOrientationNumberLetter)
}

// SetZip sets the "zip" field.
func (m *AddressPlaceMutation) SetZip(i int32) {
	m.zip = &i
	m.addzip = nil
}

// Zip returns the value of the "zip" field in the mutation.
func (m *AddressPlaceMutation) Zip() (r int32, exists bool) {
	v := m.zip
	if v == nil {
		return
	}
	return *v, true
}

// OldZip returns the old "zip" field's value of the AddressPlace entity.
// If the AddressPlace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressPlaceMutation) OldZip(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldZip is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldZip requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldZip: %w", err)
	}
	return oldValue.Zip, nil
}

// AddZip adds i to the "zip" field.
func (m *AddressPlaceMutation) AddZip(i int32) {
	if m.addzip != nil {
		*m.addzip += i
	} else {
		m.addzip = &i
	}
}

// AddedZip returns the value that was added to the "zip" field in this mutation.
func (m *AddressPlaceMutation) AddedZip() (r int32, exists bool) {
	v := m.addzip
	if v == nil {
		return
	}
	return *v, true
}

// ResetZip resets all changes to the "zip" field.
func (m *AddressPlaceMutation) ResetZip() {
	m.zip = nil
	m.addzip = nil
}

// AddStreetIDs adds the "streets" edge to the Street entity by ids.
func (m *AddressPlaceMutation) AddStreetIDs(ids ...int32) {
	if m.streets == nil {
		m.streets = make(map[int32]struct{})
	}
	for i := range ids {
		m.streets[ids[i]] = struct{}{}
	}
}

// ClearStreets clears the "streets" edge to the Street entity.
func (m *AddressPlaceMutation) ClearStreets() {
	m.clearedstreets = true
}

// StreetsCleared reports if the "streets" edge to the Street entity was cleared.
func (m *AddressPlaceMutation) StreetsCleared() bool {
	return m.clearedstreets
}

// RemoveStreetIDs removes the "streets" edge to the Street entity by IDs.
func (m *AddressPlaceMutation) RemoveStreetIDs(ids ...int32) {
	if m.removedstreets == nil {
		m.removedstreets = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.streets, ids[i])
		m.removedstreets[ids[i]] = struct{}{}
	}
}

// RemovedStreets returns the removed IDs of the "streets" edge to the Street entity.
func (m *AddressPlaceMutation) RemovedStreetsIDs() (ids []int32) {
	for id := range m.removedstreets {
		ids = append(ids, id)
	}
	return
}

// StreetsIDs returns the "streets" edge IDs in the mutation.
func (m *AddressPlaceMutation) StreetsIDs() (ids []int32) {
	for id := range m.streets {
		ids = append(ids, id)
	}
	return
}

// ResetStreets resets all changes to the "streets" edge.
func (m *AddressPlaceMutation) ResetStreets() {
	m.streets = nil
	m.clearedstreets = false
	m.removedstreets = nil
}

// Where appends a list predicates to the AddressPlaceMutation builder.
func (m *AddressPlaceMutation) Where(ps ...predicate.AddressPlace) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AddressPlaceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AddressPlace).
func (m *AddressPlaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AddressPlaceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.number != nil {
		fields = append(fields, addressplace.FieldNumber)
	}
	if m.orientation_number != nil {
		fields = append(fields, addressplace.FieldOrientationNumber)
	}
	if m.orientation_number_letter != nil {
		fields = append(fields, addressplace.FieldOrientationNumberLetter)
	}
	if m.zip != nil {
		fields = append(fields, addressplace.FieldZip)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AddressPlaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case addressplace.FieldNumber:
		return m.Number()
	case addressplace.FieldOrientationNumber:
		return m.OrientationNumber()
	case addressplace.FieldOrientationNumberLetter:
		return m.OrientationNumberLetter()
	case addressplace.FieldZip:
		return m.Zip()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AddressPlaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case addressplace.FieldNumber:
		return m.OldNumber(ctx)
	case addressplace.FieldOrientationNumber:
		return m.OldOrientationNumber(ctx)
	case addressplace.FieldOrientationNumberLetter:
		return m.OldOrientationNumberLetter(ctx)
	case addressplace.FieldZip:
		return m.OldZip(ctx)
	}
	return nil, fmt.Errorf("unknown AddressPlace field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AddressPlaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case addressplace.FieldNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case addressplace.FieldOrientationNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrientationNumber(v)
		return nil
	case addressplace.FieldOrientationNumberLetter:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrientationNumberLetter(v)
		return nil
	case addressplace.FieldZip:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetZip(v)
		return nil
	}
	return fmt.Errorf("unknown AddressPlace field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AddressPlaceMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, addressplace.FieldNumber)
	}
	if m.addorientation_number != nil {
		fields = append(fields, addressplace.FieldOrientationNumber)
	}
	if m.addzip != nil {
		fields = append(fields, addressplace.FieldZip)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AddressPlaceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case addressplace.FieldNumber:
		return m.AddedNumber()
	case addressplace.FieldOrientationNumber:
		return m.AddedOrientationNumber()
	case addressplace.FieldZip:
		return m.AddedZip()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AddressPlaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case addressplace.FieldNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	case addressplace.FieldOrientationNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrientationNumber(v)
		return nil
	case addressplace.FieldZip:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddZip(v)
		return nil
	}
	return fmt.Errorf("unknown AddressPlace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AddressPlaceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(addressplace.FieldOrientationNumber) {
		fields = append(fields, addressplace.FieldOrientationNumber)
	}
	if m.FieldCleared(addressplace.FieldOrientationNumberLetter) {
		fields = append(fields, addressplace.FieldOrientationNumberLetter)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AddressPlaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AddressPlaceMutation) ClearField(name string) error {
	switch name {
	case addressplace.FieldOrientationNumber:
		m.ClearOrientationNumber()
		return nil
	case addressplace.FieldOrientationNumberLetter:
		m.ClearOrientationNumberLetter()
		return nil
	}
	return fmt.Errorf("unknown AddressPlace nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AddressPlaceMutation) ResetField(name string) error {
	switch name {
	case addressplace.FieldNumber:
		m.ResetNumber()
		return nil
	case addressplace.FieldOrientationNumber:
		m.ResetOrientationNumber()
		return nil
	case addressplace.FieldOrientationNumberLetter:
		m.ResetOrientationNumberLetter()
		return nil
	case addressplace.FieldZip:
		m.ResetZip()
		return nil
	}
	return fmt.Errorf("unknown AddressPlace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AddressPlaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.streets != nil {
		edges = append(edges, addressplace.EdgeStreets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AddressPlaceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case addressplace.EdgeStreets:
		ids := make([]ent.Value, 0, len(m.streets))
		for id := range m.streets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AddressPlaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstreets != nil {
		edges = append(edges, addressplace.EdgeStreets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AddressPlaceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case addressplace.EdgeStreets:
		ids := make([]ent.Value, 0, len(m.removedstreets))
		for id := range m.removedstreets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AddressPlaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstreets {
		edges = append(edges, addressplace.EdgeStreets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AddressPlaceMutation) EdgeCleared(name string) bool {
	switch name {
	case addressplace.EdgeStreets:
		return m.clearedstreets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AddressPlaceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AddressPlace unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AddressPlaceMutation) ResetEdge(name string) error {
	switch name {
	case addressplace.EdgeStreets:
		m.ResetStreets()
		return nil
	}
	return fmt.Errorf("unknown AddressPlace edge %s", name)
}

// CityMutation represents an operation that mutates the City nodes in the graph.
type CityMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	name          *string
	clearedFields map[string]struct{}
	street        map[int32]struct{}
	removedstreet map[int32]struct{}
	clearedstreet bool
	done          bool
	oldValue      func(context.Context) (*City, error)
	predicates    []predicate.City
}

var _ ent.Mutation = (*CityMutation)(nil)

// cityOption allows management of the mutation configuration using functional options.
type cityOption func(*CityMutation)

// newCityMutation creates new mutation for the City entity.
func newCityMutation(c config, op Op, opts ...cityOption) *CityMutation {
	m := &CityMutation{
		config:        c,
		op:            op,
		typ:           TypeCity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCityID sets the ID field of the mutation.
func withCityID(id int32) cityOption {
	return func(m *CityMutation) {
		var (
			err   error
			once  sync.Once
			value *City
		)
		m.oldValue = func(ctx context.Context) (*City, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().City.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCity sets the old City of the mutation.
func withCity(node *City) cityOption {
	return func(m *CityMutation) {
		m.oldValue = func(context.Context) (*City, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of City entities.
func (m *CityMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CityMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *CityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CityMutation) ResetName() {
	m.name = nil
}

// AddStreetIDs adds the "street" edge to the Street entity by ids.
func (m *CityMutation) AddStreetIDs(ids ...int32) {
	if m.street == nil {
		m.street = make(map[int32]struct{})
	}
	for i := range ids {
		m.street[ids[i]] = struct{}{}
	}
}

// ClearStreet clears the "street" edge to the Street entity.
func (m *CityMutation) ClearStreet() {
	m.clearedstreet = true
}

// StreetCleared reports if the "street" edge to the Street entity was cleared.
func (m *CityMutation) StreetCleared() bool {
	return m.clearedstreet
}

// RemoveStreetIDs removes the "street" edge to the Street entity by IDs.
func (m *CityMutation) RemoveStreetIDs(ids ...int32) {
	if m.removedstreet == nil {
		m.removedstreet = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.street, ids[i])
		m.removedstreet[ids[i]] = struct{}{}
	}
}

// RemovedStreet returns the removed IDs of the "street" edge to the Street entity.
func (m *CityMutation) RemovedStreetIDs() (ids []int32) {
	for id := range m.removedstreet {
		ids = append(ids, id)
	}
	return
}

// StreetIDs returns the "street" edge IDs in the mutation.
func (m *CityMutation) StreetIDs() (ids []int32) {
	for id := range m.street {
		ids = append(ids, id)
	}
	return
}

// ResetStreet resets all changes to the "street" edge.
func (m *CityMutation) ResetStreet() {
	m.street = nil
	m.clearedstreet = false
	m.removedstreet = nil
}

// Where appends a list predicates to the CityMutation builder.
func (m *CityMutation) Where(ps ...predicate.City) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (City).
func (m *CityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CityMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, city.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case city.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case city.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown City field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case city.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown City field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown City numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown City nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CityMutation) ResetField(name string) error {
	switch name {
	case city.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown City field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.street != nil {
		edges = append(edges, city.EdgeStreet)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case city.EdgeStreet:
		ids := make([]ent.Value, 0, len(m.street))
		for id := range m.street {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstreet != nil {
		edges = append(edges, city.EdgeStreet)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case city.EdgeStreet:
		ids := make([]ent.Value, 0, len(m.removedstreet))
		for id := range m.removedstreet {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstreet {
		edges = append(edges, city.EdgeStreet)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CityMutation) EdgeCleared(name string) bool {
	switch name {
	case city.EdgeStreet:
		return m.clearedstreet
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown City unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CityMutation) ResetEdge(name string) error {
	switch name {
	case city.EdgeStreet:
		m.ResetStreet()
		return nil
	}
	return fmt.Errorf("unknown City edge %s", name)
}

// StreetMutation represents an operation that mutates the Street nodes in the graph.
type StreetMutation struct {
	config
	op              Op
	typ             string
	id              *int32
	name            *string
	clearedFields   map[string]struct{}
	cities          map[int32]struct{}
	removedcities   map[int32]struct{}
	clearedcities   bool
	adresses        map[int32]struct{}
	removedadresses map[int32]struct{}
	clearedadresses bool
	done            bool
	oldValue        func(context.Context) (*Street, error)
	predicates      []predicate.Street
}

var _ ent.Mutation = (*StreetMutation)(nil)

// streetOption allows management of the mutation configuration using functional options.
type streetOption func(*StreetMutation)

// newStreetMutation creates new mutation for the Street entity.
func newStreetMutation(c config, op Op, opts ...streetOption) *StreetMutation {
	m := &StreetMutation{
		config:        c,
		op:            op,
		typ:           TypeStreet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStreetID sets the ID field of the mutation.
func withStreetID(id int32) streetOption {
	return func(m *StreetMutation) {
		var (
			err   error
			once  sync.Once
			value *Street
		)
		m.oldValue = func(ctx context.Context) (*Street, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Street.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStreet sets the old Street of the mutation.
func withStreet(node *Street) streetOption {
	return func(m *StreetMutation) {
		m.oldValue = func(context.Context) (*Street, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StreetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StreetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Street entities.
func (m *StreetMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StreetMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *StreetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StreetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Street entity.
// If the Street object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StreetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StreetMutation) ResetName() {
	m.name = nil
}

// AddCityIDs adds the "cities" edge to the City entity by ids.
func (m *StreetMutation) AddCityIDs(ids ...int32) {
	if m.cities == nil {
		m.cities = make(map[int32]struct{})
	}
	for i := range ids {
		m.cities[ids[i]] = struct{}{}
	}
}

// ClearCities clears the "cities" edge to the City entity.
func (m *StreetMutation) ClearCities() {
	m.clearedcities = true
}

// CitiesCleared reports if the "cities" edge to the City entity was cleared.
func (m *StreetMutation) CitiesCleared() bool {
	return m.clearedcities
}

// RemoveCityIDs removes the "cities" edge to the City entity by IDs.
func (m *StreetMutation) RemoveCityIDs(ids ...int32) {
	if m.removedcities == nil {
		m.removedcities = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.cities, ids[i])
		m.removedcities[ids[i]] = struct{}{}
	}
}

// RemovedCities returns the removed IDs of the "cities" edge to the City entity.
func (m *StreetMutation) RemovedCitiesIDs() (ids []int32) {
	for id := range m.removedcities {
		ids = append(ids, id)
	}
	return
}

// CitiesIDs returns the "cities" edge IDs in the mutation.
func (m *StreetMutation) CitiesIDs() (ids []int32) {
	for id := range m.cities {
		ids = append(ids, id)
	}
	return
}

// ResetCities resets all changes to the "cities" edge.
func (m *StreetMutation) ResetCities() {
	m.cities = nil
	m.clearedcities = false
	m.removedcities = nil
}

// AddAdressIDs adds the "adresses" edge to the AddressPlace entity by ids.
func (m *StreetMutation) AddAdressIDs(ids ...int32) {
	if m.adresses == nil {
		m.adresses = make(map[int32]struct{})
	}
	for i := range ids {
		m.adresses[ids[i]] = struct{}{}
	}
}

// ClearAdresses clears the "adresses" edge to the AddressPlace entity.
func (m *StreetMutation) ClearAdresses() {
	m.clearedadresses = true
}

// AdressesCleared reports if the "adresses" edge to the AddressPlace entity was cleared.
func (m *StreetMutation) AdressesCleared() bool {
	return m.clearedadresses
}

// RemoveAdressIDs removes the "adresses" edge to the AddressPlace entity by IDs.
func (m *StreetMutation) RemoveAdressIDs(ids ...int32) {
	if m.removedadresses == nil {
		m.removedadresses = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.adresses, ids[i])
		m.removedadresses[ids[i]] = struct{}{}
	}
}

// RemovedAdresses returns the removed IDs of the "adresses" edge to the AddressPlace entity.
func (m *StreetMutation) RemovedAdressesIDs() (ids []int32) {
	for id := range m.removedadresses {
		ids = append(ids, id)
	}
	return
}

// AdressesIDs returns the "adresses" edge IDs in the mutation.
func (m *StreetMutation) AdressesIDs() (ids []int32) {
	for id := range m.adresses {
		ids = append(ids, id)
	}
	return
}

// ResetAdresses resets all changes to the "adresses" edge.
func (m *StreetMutation) ResetAdresses() {
	m.adresses = nil
	m.clearedadresses = false
	m.removedadresses = nil
}

// Where appends a list predicates to the StreetMutation builder.
func (m *StreetMutation) Where(ps ...predicate.Street) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StreetMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Street).
func (m *StreetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StreetMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, street.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StreetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case street.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StreetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case street.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Street field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StreetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case street.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Street field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StreetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StreetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StreetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Street numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StreetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StreetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StreetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Street nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StreetMutation) ResetField(name string) error {
	switch name {
	case street.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Street field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StreetMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cities != nil {
		edges = append(edges, street.EdgeCities)
	}
	if m.adresses != nil {
		edges = append(edges, street.EdgeAdresses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StreetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case street.EdgeCities:
		ids := make([]ent.Value, 0, len(m.cities))
		for id := range m.cities {
			ids = append(ids, id)
		}
		return ids
	case street.EdgeAdresses:
		ids := make([]ent.Value, 0, len(m.adresses))
		for id := range m.adresses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StreetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcities != nil {
		edges = append(edges, street.EdgeCities)
	}
	if m.removedadresses != nil {
		edges = append(edges, street.EdgeAdresses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StreetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case street.EdgeCities:
		ids := make([]ent.Value, 0, len(m.removedcities))
		for id := range m.removedcities {
			ids = append(ids, id)
		}
		return ids
	case street.EdgeAdresses:
		ids := make([]ent.Value, 0, len(m.removedadresses))
		for id := range m.removedadresses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StreetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcities {
		edges = append(edges, street.EdgeCities)
	}
	if m.clearedadresses {
		edges = append(edges, street.EdgeAdresses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StreetMutation) EdgeCleared(name string) bool {
	switch name {
	case street.EdgeCities:
		return m.clearedcities
	case street.EdgeAdresses:
		return m.clearedadresses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StreetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Street unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StreetMutation) ResetEdge(name string) error {
	switch name {
	case street.EdgeCities:
		m.ResetCities()
		return nil
	case street.EdgeAdresses:
		m.ResetAdresses()
		return nil
	}
	return fmt.Errorf("unknown Street edge %s", name)
}
