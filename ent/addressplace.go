// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/encero/ruian_parser/ent/addressplace"
)

// AddressPlace is the model entity for the AddressPlace schema.
type AddressPlace struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number int32 `json:"number,omitempty"`
	// OrientationNumber holds the value of the "orientation_number" field.
	OrientationNumber int32 `json:"orientation_number,omitempty"`
	// OrientationNumberLetter holds the value of the "orientation_number_letter" field.
	OrientationNumberLetter string `json:"orientation_number_letter,omitempty"`
	// Zip holds the value of the "zip" field.
	Zip int32 `json:"zip,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressPlaceQuery when eager-loading is set.
	Edges AddressPlaceEdges `json:"edges"`
}

// AddressPlaceEdges holds the relations/edges for other nodes in the graph.
type AddressPlaceEdges struct {
	// Streets holds the value of the streets edge.
	Streets []*Street `json:"streets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StreetsOrErr returns the Streets value or an error if the edge
// was not loaded in eager-loading.
func (e AddressPlaceEdges) StreetsOrErr() ([]*Street, error) {
	if e.loadedTypes[0] {
		return e.Streets, nil
	}
	return nil, &NotLoadedError{edge: "streets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AddressPlace) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case addressplace.FieldID, addressplace.FieldNumber, addressplace.FieldOrientationNumber, addressplace.FieldZip:
			values[i] = new(sql.NullInt64)
		case addressplace.FieldOrientationNumberLetter:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AddressPlace", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AddressPlace fields.
func (ap *AddressPlace) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case addressplace.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int32(value.Int64)
		case addressplace.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				ap.Number = int32(value.Int64)
			}
		case addressplace.FieldOrientationNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field orientation_number", values[i])
			} else if value.Valid {
				ap.OrientationNumber = int32(value.Int64)
			}
		case addressplace.FieldOrientationNumberLetter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field orientation_number_letter", values[i])
			} else if value.Valid {
				ap.OrientationNumberLetter = value.String
			}
		case addressplace.FieldZip:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field zip", values[i])
			} else if value.Valid {
				ap.Zip = int32(value.Int64)
			}
		}
	}
	return nil
}

// QueryStreets queries the "streets" edge of the AddressPlace entity.
func (ap *AddressPlace) QueryStreets() *StreetQuery {
	return (&AddressPlaceClient{config: ap.config}).QueryStreets(ap)
}

// Update returns a builder for updating this AddressPlace.
// Note that you need to call AddressPlace.Unwrap() before calling this method if this AddressPlace
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AddressPlace) Update() *AddressPlaceUpdateOne {
	return (&AddressPlaceClient{config: ap.config}).UpdateOne(ap)
}

// Unwrap unwraps the AddressPlace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AddressPlace) Unwrap() *AddressPlace {
	tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AddressPlace is not a transactional entity")
	}
	ap.config.driver = tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AddressPlace) String() string {
	var builder strings.Builder
	builder.WriteString("AddressPlace(")
	builder.WriteString(fmt.Sprintf("id=%v", ap.ID))
	builder.WriteString(", number=")
	builder.WriteString(fmt.Sprintf("%v", ap.Number))
	builder.WriteString(", orientation_number=")
	builder.WriteString(fmt.Sprintf("%v", ap.OrientationNumber))
	builder.WriteString(", orientation_number_letter=")
	builder.WriteString(ap.OrientationNumberLetter)
	builder.WriteString(", zip=")
	builder.WriteString(fmt.Sprintf("%v", ap.Zip))
	builder.WriteByte(')')
	return builder.String()
}

// AddressPlaces is a parsable slice of AddressPlace.
type AddressPlaces []*AddressPlace

func (ap AddressPlaces) config(cfg config) {
	for _i := range ap {
		ap[_i].config = cfg
	}
}
